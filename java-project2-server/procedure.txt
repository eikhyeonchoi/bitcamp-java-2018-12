// 1단계 : 클라이언트와 통신하는 기능으로 변경
//
// 2단계 : 규칙1 에따라 클라이언트 게시물 목록 보내기
//       teacher 프로젝트 java-project2-server 참고

// 3단계 : 규칙2
//       teacher 프로젝트 java-project2-server 참고
// 
// 4단계 Command를 다루는 클래스에 대해 리팩토링수행
// ==> Command를 미리 구현한 AbstractCommand 클래스 생성
// ==> 클라이언트의 데이터를 읽고 출력하는 것을 담당할
//    Request와 Response클래스 생성
// ==> 기존 Command구현체는 Command인터페이스를 구현하는대신
//     AbstractCommand를 상속 받도록 변경
// ==> 또한 execute(BufferedReader, PrintWriter) 대신
//    execute(Request, Response) 를 오버라이딩 하도록 변경
// ==> 이유?
//     클라이언트와 데이터를 주고 받는 것을 조금 더 쉽게 하기위해 
// 
// 5단계 회원관리에 검색 기능을 추가한다 == 그래도 클라이언트는 변경할 필요가 없다
// ==> 어플리케이션 서버 아키텍쳐의 장점은 서버의 기능을 변경하더라도 클라리언트를 변경할 필요가 없다는 것
// ==> 즉, 다시 클라이언트를 배포할 필요없다 만약 서버인 네이버에 기능이 추가된다고해서 클라이언트인 
//     크롬 브라우져를 재설치하지 않아도 네이버의 새로운 기능을 사용할 수 있다  
// ==> 작업 
//    1) MemberDao에 키워드로 회원 정보를 찾는 findByKeyword()를 추가
// 
// 6단계
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 